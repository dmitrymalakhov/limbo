schema {
  query: Query
  mutation: Mutation
}

input AddEmployeeInput {
  clientMutationId: String!
}

type AddEmployeePayload {
  employeeEdge: EmployeeEdge
  viewer: User
  clientMutationId: String!
}

type Employee {
  id: ID!
  name: String
}

type EmployeeConnection {
  pageInfo: PageInfo!
  edges: [EmployeeEdge]
}

type EmployeeEdge {
  node: Employee
  cursor: String!
}

type Mutation {
  addEmployee(input: AddEmployeeInput!): AddEmployeePayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  viewer: User
  node(id: ID!): Node
}

type User {
  id: ID!
  employees(after: String, first: Int, before: String, last: Int): EmployeeConnection
}
